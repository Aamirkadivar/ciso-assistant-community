# Generated by Django 5.0.4 on 2024-06-09 21:49

import core.validators
import django.db.models.deletion
import iam.models
import uuid
from django.conf import settings
from django.db import migrations, models
from core.models import StoredLibrary, LoadedLibrary


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# core.migrations.0010_rename_score_definition_framework_scores_definition_and_more
# core.migrations.0011_auto_20240501_1342
# core.migrations.0012_alter_appliedcontrol_updated_at_and_more
# core.migrations.0014_auto_20240522_1731


WELL_KNOWN_SCORES = {
    "urn:intuitem:risk:framework:tisax-v6.0.2": (0, 5),
    "urn:intuitem:risk:framework:ccb-cff-2023-03-01": (1, 5),
    "urn:intuitem:risk:framework:nist-csf-2.0": (1, 4),
    "urn:intuitem:risk:framework:nist-csf-1.1": (1, 4),
}


def fix_well_known_scores(apps, schema_editor):
    Framework = apps.get_model("core", "Framework")
    ComplianceAssessment = apps.get_model("core", "ComplianceAssessment")
    for framework in Framework.objects.all():
        if framework.urn in WELL_KNOWN_SCORES:
            (framework.min_score, framework.max_score) = WELL_KNOWN_SCORES[
                framework.urn
            ]
            framework.save()
            print("custom migration for", framework.urn)
    for assessment in ComplianceAssessment.objects.all():
        if assessment.framework.urn in WELL_KNOWN_SCORES:
            (assessment.min_score, assessment.max_score) = WELL_KNOWN_SCORES[
                assessment.framework.urn
            ]
            print("custom migration for", assessment.framework.urn)
        else:
            # no default value, so fix it now
            (assessment.min_score, assessment.max_score) = (0, 100)
        assessment.save()


BUILTIN_LIBRARY_URNS = set(
    [
        "urn:intuitem:risk:library:nis2-directive",
        "urn:intuitem:risk:library:cmmc-2.0",
        "urn:intuitem:risk:library:pcidss-4_0",
        "urn:intuitem:risk:library:nist-ssdf-1.1",
        "urn:intuitem:risk:library:rgs-v2.0",
        "urn:intuitem:risk:library:doc-pol",
        "urn:intuitem:risk:library:dora",
        "urn:intuitem:risk:library:3cf-v2",
        "urn:intuitem:risk:library:owasp-top-10-web",
        "urn:intuitem:risk:library:hds-v2023-a",
        "urn:ackwa:risk:library:pgssi-s-1.0",
        "urn:intuitem:risk:library:gdpr-checklist",
        "urn:intuitem:risk:library:anssi-guide-hygiene",
        "urn:intuitem:risk:library:iso27001-2022",
        "urn:intuitem:risk:library:mitre-attack-v14",
        "urn:protocolpaladin:risk:library:matrice-des-risques-critiques-5x5",
        "urn:intuitem:risk:library:risk-matrix-3x3-mult",
        "urn:intuitem:risk:library:fedramp-rev5",
        "urn:intuitem:risk:library:nist-csf-1.1",
        "urn:intuitem:risk:library:critical_risk_matrix_3x3",
        "urn:intuitem:risk:library:nist-800-171-rev2",
        "urn:intuitem:risk:library:ecc-1",
        "urn:intuitem:risk:library:secnumcloud-3.2-annexe-2",
        "urn:intuitem:risk:library:secnumcloud-3.2",
        "urn:intuitem:risk:library:3cf-ed1-v1",
        "urn:intuitem:risk:library:fadp",
        "urn:intuitem:risk:library:tisax-v6.0.2",
        "urn:intuitem:risk:library:owasp-asvs-4.0.3",
        "urn:protocolpaladin:risk:library:anssi-recommandations-configuration-systeme-gnu-linux",
        "urn:intuitem:risk:library:lpm-oiv-2019",
        "urn:intuitem:risk:library:aircyber-v1.5.2",
        "urn:intuitem:risk:library:nist-ai-rmf-1.0",
        "urn:intuitem:risk:library:dfs-500-2023-11",
        "urn:intuitem:risk:library:nist-csf-2.0",
        "urn:intuitem:risk:library:anssi-nis-rules",
        "urn:intuitem:risk:library:risk-matrix-5x5-sensitive",
        "urn:intuitem:risk:library:iso27001-2022-fr",
        "urn:intuitem:risk:library:pspf",
        "urn:intuitem:risk:library:nist-privacy-1.0",
        "urn:intuitem:risk:library:ccb-cff-2023-03-01",
        "urn:intuitem:risk:library:cra-proposal-annexes",
        "urn:ackwa:risk:library:risk-matrix-4x4-pgssi-s-1.0",
        "urn:intuitem:risk:library:essential-eight",
        "urn:intuitem:risk:library:nist-sp-800-66-rev2",
        "urn:intuitem:risk:library:critical_risk_matrix_5x5",
        "urn:protocolpaladin:risk:library:matrice-des-risques-critiques-3x3",
        "urn:intuitem:risk:library:nist-sp-800-53-rev5",
        "urn:intuitem:risk:library:tiber-eu-2018",
        "urn:intuitem:risk:library:anssi-genai-security-recommendations-1.0",
        "urn:intuitem:risk:library:soc2-2017",
    ]
)


def adapt_libraries(apps, schema_editor):
    LoadedLibrary = apps.get_model("core", "LoadedLibrary")
    for library in LoadedLibrary.objects.all():
        library.builtin = (
            library.urn in BUILTIN_LIBRARY_URNS
        )  # There is no perfect way to verify is a loaded custom library is builtin or not
        # There is no way to generate the objects_meta dictionary without reading all files from ./backend/library/libraries, but we can generate the missing objects_meta values at the same time we generate the StoredLibrary objects.

        library.objects_meta = {
            "frameworks": library.frameworks.count(),
            "threats": library.threats.count(),
            "reference_controls": library.reference_controls.count(),
            "risk_matrix": library.risk_matrices.count(),
        }
        library.save()


def fix_urns_for_enisa_5g_scm(apps, schema_editor):
    enisa_5g_scm_stored_library = StoredLibrary.objects.filter(
        urn="urn:intuitem:risk:library:enisa-5g-scm-v1.3"
    )
    if enisa_5g_scm_stored_library:
        enisa_5g_scm_stored_library[
            0
        ].delete()  # the lib will be added again in the store at the end of the migration
    enisa_5g_scm_loaded_library = LoadedLibrary.objects.filter(
        urn="urn:intuitem:risk:library:enisa-5g-scm-v1.3"
    )
    if enisa_5g_scm_loaded_library:
        count = 0
        for b in enisa_5g_scm_loaded_library[0].reference_controls.all():
            if b.urn[:4] != "urn:":
                b.urn = "urn:intuitem:" + b.urn
                b.save()
                count += 1
        print(f"fixed {count} URNs")


class Migration(migrations.Migration):
    replaces = [
        ("core", "0001_initial"),
        ("core", "0002_initial"),
        ("core", "0003_alter_riskscenario_strength_of_knowledge"),
        ("core", "0004_complianceassessment_is_published_and_more"),
        ("core", "0005_alter_project_lc_status_alter_securitymeasure_effort"),
        ("core", "0006_remove_securitymeasure_security_function_and_more"),
        ("core", "0007_alter_requirementlevel_framework_and_more"),
        ("core", "0008_alter_complianceassessment_status_and_more"),
        ("core", "0009_framework_max_score_framework_min_score_and_more"),
        ("core", "0010_rename_score_definition_framework_scores_definition_and_more"),
        ("core", "0011_auto_20240501_1342"),
        ("core", "0012_alter_appliedcontrol_updated_at_and_more"),
        ("core", "0013_requirementnode_typical_evidence"),
        ("core", "0014_auto_20240522_1731"),
    ]

    initial = True

    dependencies = [
        ("iam", "0001_initial"),
        ("iam", "0003_alter_folder_updated_at_alter_role_updated_at_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Asset",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "business_value",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="business value"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("PR", "Primary"), ("SP", "Support")],
                        default="SP",
                        max_length=2,
                        verbose_name="type",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "parent_assets",
                    models.ManyToManyField(
                        blank=True, to="core.asset", verbose_name="parent assets"
                    ),
                ),
            ],
            options={
                "verbose_name": "Asset",
                "verbose_name_plural": "Assets",
            },
        ),
        migrations.CreateModel(
            name="Evidence",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Attachment for evidence (eg. screenshot, log file, etc.)",
                        null=True,
                        upload_to="",
                        validators=[
                            core.validators.validate_file_size,
                            core.validators.validate_file_name,
                        ],
                        verbose_name="Attachment",
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        blank=True,
                        help_text="Link to the evidence (eg. Jira ticket, etc.)",
                        null=True,
                        verbose_name="Link",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Evidence",
                "verbose_name_plural": "Evidences",
            },
        ),
        migrations.CreateModel(
            name="Library",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "copyright",
                    models.CharField(
                        blank=True, max_length=4096, null=True, verbose_name="Copyright"
                    ),
                ),
                ("version", models.IntegerField(verbose_name="Version")),
                (
                    "provider",
                    models.CharField(
                        blank=True,
                        help_text="Provider of the library",
                        max_length=100,
                        null=True,
                        verbose_name="Provider",
                    ),
                ),
                (
                    "packager",
                    models.CharField(
                        blank=True,
                        help_text="Packager of the library",
                        max_length=100,
                        null=True,
                        verbose_name="Packager",
                    ),
                ),
                (
                    "dependencies",
                    models.ManyToManyField(
                        blank=True, to="core.library", verbose_name="Dependencies"
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Framework",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="frameworks",
                        to="core.library",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "max_score",
                    models.IntegerField(default=100, verbose_name="Maximum score"),
                ),
                (
                    "min_score",
                    models.IntegerField(default=0, verbose_name="Minimum score"),
                ),
                (
                    "scores_definition",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Score definition"
                    ),
                ),
                (
                    "implementation_groups_definition",
                    models.JSONField(
                        blank=True,
                        null=True,
                        verbose_name="Implementation groups definition",
                    ),
                ),
            ],
            options={
                "verbose_name": "Framework",
                "verbose_name_plural": "Frameworks",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "internal_reference",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Internal reference",
                    ),
                ),
                (
                    "lc_status",
                    models.CharField(
                        choices=[
                            ("undefined", "Undefined"),
                            ("in_design", "Design"),
                            ("in_dev", "Development"),
                            ("in_prod", "Production"),
                            ("eol", "EndOfLife"),
                            ("dropped", "Dropped"),
                        ],
                        default="in_design",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Project",
                "verbose_name_plural": "Projects",
            },
        ),
        migrations.CreateModel(
            name="ComplianceAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        default="1.0",
                        help_text="Version of the compliance assessment (eg. 1.0, 2.0, etc.)",
                        max_length=100,
                        null=True,
                        verbose_name="Version",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In progress"),
                            ("in_review", "In review"),
                            ("done", "Done"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="planned",
                        max_length=100,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "eta",
                    models.DateField(
                        blank=True,
                        help_text="Estimated time of arrival",
                        null=True,
                        verbose_name="ETA",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True,
                        help_text="Due date",
                        null=True,
                        verbose_name="Due date",
                    ),
                ),
                (
                    "result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("compliant", "Compliant"),
                            ("non_compliant_minor", "Non compliant (minor)"),
                            ("non_compliant_major", "Non compliant (major)"),
                            ("not_applicable", "Not applicable"),
                        ],
                        max_length=100,
                        null=True,
                        verbose_name="Result",
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_authors",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Authors",
                    ),
                ),
                (
                    "reviewers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_reviewers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Reviewers",
                    ),
                ),
                (
                    "framework",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.framework",
                        verbose_name="Framework",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.project",
                        verbose_name="Project",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "max_score",
                    models.IntegerField(null=True, verbose_name="Maximum score"),
                ),
                (
                    "min_score",
                    models.IntegerField(null=True, verbose_name="Minimum score"),
                ),
                (
                    "scores_definition",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Score definition"
                    ),
                ),
                (
                    "selected_implementation_groups",
                    models.JSONField(
                        blank=True,
                        null=True,
                        verbose_name="Selected implementation groups",
                    ),
                ),
            ],
            options={
                "verbose_name": "Compliance assessment",
                "verbose_name_plural": "Compliance assessments",
            },
        ),
        migrations.CreateModel(
            name="RiskMatrix",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "json_definition",
                    models.JSONField(
                        default=dict,
                        help_text="JSON definition of the risk matrix.         See the documentation for more information.",
                        verbose_name="JSON definition",
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="If the risk matrix is set as disabled, it will not be available for selection for new risk assessments.",
                        verbose_name="enabled",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_matrices",
                        to="core.library",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RiskAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True,
                        default="1.0",
                        help_text="Version of the compliance assessment (eg. 1.0, 2.0, etc.)",
                        max_length=100,
                        null=True,
                        verbose_name="Version",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In progress"),
                            ("in_review", "In review"),
                            ("done", "Done"),
                            ("deprecated", "Deprecated"),
                        ],
                        default="planned",
                        max_length=100,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "eta",
                    models.DateField(
                        blank=True,
                        help_text="Estimated time of arrival",
                        null=True,
                        verbose_name="ETA",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(
                        blank=True,
                        help_text="Due date",
                        null=True,
                        verbose_name="Due date",
                    ),
                ),
                (
                    "authors",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_authors",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Authors",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.project",
                        verbose_name="Project",
                    ),
                ),
                (
                    "reviewers",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)s_reviewers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Reviewers",
                    ),
                ),
                (
                    "risk_matrix",
                    models.ForeignKey(
                        help_text="WARNING! After choosing it, you will not be able to change it",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="core.riskmatrix",
                        verbose_name="Risk matrix",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Risk assessment",
                "verbose_name_plural": "Risk assessments",
            },
        ),
        migrations.CreateModel(
            name="ReferenceControl",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("policy", "Policy"),
                            ("process", "Process"),
                            ("technical", "Technical"),
                            ("physical", "Physical"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Category",
                    ),
                ),
                (
                    "typical_evidence",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Typical evidence"
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reference_controls",
                        to="core.library",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reference control",
                "verbose_name_plural": "Reference controls",
            },
        ),
        migrations.CreateModel(
            name="AppliedControl",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("policy", "Policy"),
                            ("process", "Process"),
                            ("technical", "Technical"),
                            ("physical", "Physical"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Category",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("planned", "Planned"),
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Status",
                    ),
                ),
                (
                    "eta",
                    models.DateField(
                        blank=True,
                        help_text="Estimated Time of Arrival",
                        null=True,
                        verbose_name="ETA",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Date after which the applied control is no longer valid",
                        null=True,
                        verbose_name="Expiry date",
                    ),
                ),
                (
                    "link",
                    models.CharField(
                        blank=True,
                        help_text="External url for action follow-up (eg. Jira ticket)",
                        max_length=1000,
                        null=True,
                        verbose_name="Link",
                    ),
                ),
                (
                    "effort",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("S", "Small"),
                            ("M", "Medium"),
                            ("L", "Large"),
                            ("XL", "Extra Large"),
                        ],
                        help_text="Relative effort of the measure (using T-Shirt sizing)",
                        max_length=2,
                        null=True,
                        verbose_name="Effort",
                    ),
                ),
                (
                    "evidences",
                    models.ManyToManyField(
                        blank=True,
                        related_name="applied_controls",
                        to="core.evidence",
                        verbose_name="Evidences",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "reference_control",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.referencecontrol",
                        verbose_name="Reference Control",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Applied control",
                "verbose_name_plural": "Applied controls",
            },
        ),
        migrations.CreateModel(
            name="Threat",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "library",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="threats",
                        to="core.library",
                    ),
                ),
            ],
            options={
                "verbose_name": "Threat",
                "verbose_name_plural": "Threats",
            },
        ),
        migrations.CreateModel(
            name="RequirementNode",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "parent_urn",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Parent URN"
                    ),
                ),
                ("order_id", models.IntegerField(null=True, verbose_name="Order ID")),
                ("assessable", models.BooleanField(verbose_name="Assessable")),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "framework",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requirement_nodes",
                        to="core.framework",
                        verbose_name="Framework",
                    ),
                ),
                (
                    "reference_controls",
                    models.ManyToManyField(
                        blank=True,
                        related_name="requirements",
                        to="core.referencecontrol",
                        verbose_name="Reference controls",
                    ),
                ),
                (
                    "threats",
                    models.ManyToManyField(
                        blank=True,
                        related_name="requirements",
                        to="core.threat",
                        verbose_name="Threats",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "implementation_groups",
                    models.JSONField(null=True, verbose_name="Implementation groups"),
                ),
            ],
            options={
                "verbose_name": "RequirementNode",
                "verbose_name_plural": "RequirementNodes",
            },
        ),
        migrations.CreateModel(
            name="RiskScenario",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "existing_controls",
                    models.TextField(
                        blank=True,
                        help_text="The existing controls to manage this risk. Edit the risk scenario to add extra applied controls.",
                        max_length=2000,
                        verbose_name="Existing controls",
                    ),
                ),
                (
                    "current_proba",
                    models.SmallIntegerField(
                        default=-1, verbose_name="Current probability"
                    ),
                ),
                (
                    "current_impact",
                    models.SmallIntegerField(default=-1, verbose_name="Current impact"),
                ),
                (
                    "current_level",
                    models.SmallIntegerField(
                        default=-1,
                        help_text="The risk level given the current measures. Automatically updated on Save, based on the chosen risk matrix",
                        verbose_name="Current level",
                    ),
                ),
                (
                    "residual_proba",
                    models.SmallIntegerField(
                        default=-1, verbose_name="Residual probability"
                    ),
                ),
                (
                    "residual_impact",
                    models.SmallIntegerField(
                        default=-1, verbose_name="Residual impact"
                    ),
                ),
                (
                    "residual_level",
                    models.SmallIntegerField(
                        default=-1,
                        help_text="The risk level when all the extra measures are done. Automatically updated on Save, based on the chosen risk matrix",
                        verbose_name="Residual level",
                    ),
                ),
                (
                    "treatment",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("mitigate", "Mitigate"),
                            ("accept", "Accept"),
                            ("avoid", "Avoid"),
                            ("transfer", "Transfer"),
                        ],
                        default="open",
                        max_length=20,
                        verbose_name="Treatment status",
                    ),
                ),
                (
                    "strength_of_knowledge",
                    models.IntegerField(
                        default=-1,
                        help_text="The strength of the knowledge supporting the assessment",
                        verbose_name="Strength of Knowledge",
                    ),
                ),
                (
                    "justification",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Justification",
                    ),
                ),
                (
                    "assets",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Assets impacted by the risk scenario",
                        related_name="risk_scenarios",
                        to="core.asset",
                        verbose_name="Assets",
                    ),
                ),
                (
                    "risk_assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_scenarios",
                        to="core.riskassessment",
                        verbose_name="RiskAssessment",
                    ),
                ),
                (
                    "applied_controls",
                    models.ManyToManyField(
                        blank=True,
                        related_name="risk_scenarios",
                        to="core.appliedcontrol",
                        verbose_name="Applied controls",
                    ),
                ),
                (
                    "threats",
                    models.ManyToManyField(
                        blank=True,
                        related_name="risk_scenarios",
                        to="core.threat",
                        verbose_name="Threats",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Risk scenario",
                "verbose_name_plural": "Risk scenarios",
            },
        ),
        migrations.CreateModel(
            name="RequirementAssessment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("to_do", "To do"),
                            ("in_progress", "In progress"),
                            ("non_compliant", "Non compliant"),
                            ("partially_compliant", "Partially compliant"),
                            ("compliant", "Compliant"),
                            ("not_applicable", "Not applicable"),
                        ],
                        default="to_do",
                        max_length=100,
                        verbose_name="Status",
                    ),
                ),
                (
                    "observation",
                    models.TextField(blank=True, null=True, verbose_name="Observation"),
                ),
                (
                    "compliance_assessment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requirement_assessments",
                        to="core.complianceassessment",
                        verbose_name="Compliance assessment",
                    ),
                ),
                (
                    "evidences",
                    models.ManyToManyField(
                        blank=True,
                        related_name="requirement_assessments",
                        to="core.evidence",
                        verbose_name="Evidences",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "requirement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.requirementnode",
                        verbose_name="Requirement",
                    ),
                ),
                (
                    "applied_controls",
                    models.ManyToManyField(
                        blank=True,
                        related_name="requirement_assessments",
                        to="core.appliedcontrol",
                        verbose_name="Applied controls",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "is_scored",
                    models.BooleanField(default=False, verbose_name="Is scored"),
                ),
                (
                    "score",
                    models.IntegerField(blank=True, null=True, verbose_name="Score"),
                ),
                (
                    "selected",
                    models.BooleanField(default=True, verbose_name="Selected"),
                ),
            ],
            options={
                "verbose_name": "Requirement assessment",
                "verbose_name_plural": "Requirement assessments",
            },
        ),
        migrations.CreateModel(
            name="RequirementLevel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="URN",
                    ),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                ("level", models.IntegerField(verbose_name="Level")),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "framework",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requirement_levels",
                        to="core.framework",
                        verbose_name="Framework",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Requirements level",
                "verbose_name_plural": "Requirements levels",
            },
        ),
        migrations.CreateModel(
            name="RiskAcceptance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated√í at"),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("submitted", "Submitted"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("revoked", "Revoked"),
                        ],
                        default="created",
                        max_length=20,
                        verbose_name="State",
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        help_text="Specify when the risk acceptance will no longer apply",
                        null=True,
                        verbose_name="Expiry date",
                    ),
                ),
                (
                    "accepted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Acceptance date"
                    ),
                ),
                (
                    "rejected_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Rejection date"
                    ),
                ),
                (
                    "revoked_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Revocation date"
                    ),
                ),
                (
                    "justification",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Justification",
                    ),
                ),
                (
                    "approver",
                    models.ForeignKey(
                        blank=True,
                        help_text="Risk owner and approver identity",
                        max_length=200,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approver",
                    ),
                ),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
                (
                    "risk_scenarios",
                    models.ManyToManyField(
                        help_text="Select the risk scenarios to be accepted, attention they must be part of the chosen domain",
                        to="core.riskscenario",
                        verbose_name="Risk scenarios",
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
            ],
            options={
                "verbose_name": "Risk acceptance",
                "verbose_name_plural": "Risk acceptances",
                "permissions": [
                    ("approve_riskacceptance", "Can validate/rejected risk acceptances")
                ],
            },
        ),
        migrations.CreateModel(
            name="Policy",
            fields=[],
            options={
                "verbose_name": "Policy",
                "verbose_name_plural": "Policies",
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("core.appliedcontrol",),
        ),
        migrations.DeleteModel(
            name="RequirementLevel",
        ),
        migrations.RunPython(
            code=fix_well_known_scores,
        ),
        migrations.AlterField(
            model_name="appliedcontrol",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="asset",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="complianceassessment",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="evidence",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="framework",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="project",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="referencecontrol",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="requirementassessment",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="requirementnode",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="riskacceptance",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="riskassessment",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="riskmatrix",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="riskscenario",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterField(
            model_name="threat",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.RenameModel(
            old_name="Library",
            new_name="LoadedLibrary",
        ),
        migrations.AlterField(
            model_name="loadedlibrary",
            name="provider",
            field=models.CharField(
                blank=True, max_length=200, null=True, verbose_name="Provider"
            ),
        ),
        migrations.AlterField(
            model_name="loadedlibrary",
            name="urn",
            field=models.CharField(
                blank=True, max_length=100, null=True, verbose_name="URN"
            ),
        ),
        migrations.AlterField(
            model_name="loadedlibrary",
            name="dependencies",
            field=models.ManyToManyField(
                blank=True, to="core.loadedlibrary", verbose_name="Dependencies"
            ),
        ),
        migrations.AddField(
            model_name="loadedlibrary",
            name="builtin",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="loadedlibrary",
            name="objects_meta",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="loadedlibrary",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, verbose_name="Updated at"),
        ),
        migrations.AlterModelOptions(
            name="loadedlibrary",
            options={
                "abstract": False,
                "unique_together": {("urn", "locale", "version")},
            },
        ),
        migrations.AlterField(
            model_name="framework",
            name="library",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="frameworks",
                to="core.loadedlibrary",
            ),
        ),
        migrations.AlterField(
            model_name="referencecontrol",
            name="library",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reference_controls",
                to="core.loadedlibrary",
            ),
        ),
        migrations.AlterField(
            model_name="riskmatrix",
            name="library",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="risk_matrices",
                to="core.loadedlibrary",
            ),
        ),
        migrations.AlterField(
            model_name="threat",
            name="library",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="threats",
                to="core.loadedlibrary",
            ),
        ),
        migrations.CreateModel(
            name="StoredLibrary",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "is_published",
                    models.BooleanField(default=False, verbose_name="published"),
                ),
                (
                    "ref_id",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "locale",
                    models.CharField(
                        default="en", max_length=100, verbose_name="Locale"
                    ),
                ),
                (
                    "default_locale",
                    models.BooleanField(default=True, verbose_name="Default locale"),
                ),
                (
                    "provider",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Provider"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "annotation",
                    models.TextField(blank=True, null=True, verbose_name="Annotation"),
                ),
                (
                    "urn",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="URN"
                    ),
                ),
                (
                    "copyright",
                    models.CharField(
                        blank=True, max_length=4096, null=True, verbose_name="Copyright"
                    ),
                ),
                ("version", models.IntegerField(verbose_name="Version")),
                (
                    "packager",
                    models.CharField(
                        blank=True,
                        help_text="Packager of the library",
                        max_length=100,
                        null=True,
                        verbose_name="Packager",
                    ),
                ),
                ("builtin", models.BooleanField(default=False)),
                ("objects_meta", models.JSONField(default=dict)),
                ("dependencies", models.JSONField(null=True)),
                ("is_loaded", models.BooleanField(default=False)),
                ("hash_checksum", models.CharField(max_length=64)),
                ("content", models.TextField()),
                (
                    "folder",
                    models.ForeignKey(
                        default=iam.models.Folder.get_root_folder,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_folder",
                        to="iam.folder",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "unique_together": {("urn", "locale", "version")},
            },
        ),
        migrations.RunPython(
            code=adapt_libraries,
        ),
        migrations.AddField(
            model_name="requirementnode",
            name="typical_evidence",
            field=models.TextField(
                blank=True, null=True, verbose_name="Typical evidence"
            ),
        ),
        migrations.RunPython(
            code=fix_urns_for_enisa_5g_scm,
        ),
    ]
